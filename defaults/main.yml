---

graphite:
  common:
    # Name of the managed service
    name: "{{ go_graphite.service }}"

    # Version of the collectd daemon
    version: "{{ go_graphite.version }}"

    # Base/working directory for collectd daemon
    home: "/etc/{{ go_graphite.service | default('go-graphite') }}"

    # Location for configuration files
    # conf: "/usr/share/carbonapi"

    # Name of SysV script or Systemd unit
    daemon: "{{ go_graphite.service }}"

    # Processes and files owner
    owner: "root"

    # Global options for collectd service
    options: {}

  carbonapi:
    conf: "{{ go_graphite.service }}.yaml"
    providers:
      pkg:
        packages:
          - carbonapi
    options:
      # Need to be URL, http or https
      zipper: "http://localhost:8080"
      # Listen address, should always include hostname or ip address and a port.
      listen: "localhost:8081"
      # Max concurrent requests to CarbonZipper
      concurency: 20
      cache:
         # Type of caching. Valid: "mem", "memcache", "none"
         type: "mem"
         # Cache limit in megabytes
         size_mb: 0
         # Only used by memcache type of cache. List of memcache servers.
#         memcachedServers:
#             - "127.0.0.1:1234"
#             - "127.0.0.2:1235"
      # Amount of CPUs to use. 0 - unlimited
      cpus: 0
      # Timezone, default - local
      tz: ""
      # If 'true', carbonapi will send requests as is, with globs and braces
      # Otherwise for each request it will generate /metrics/find and then /render
      # individual metrics.
      # true - faster, but will cause carbonzipper to consume much more RAM.
      sendGlobsAsIs: false
      graphite:
          # Host:port where to send internal metrics
          # Empty = disabled
          host: ""
          interval: "60s"
          prefix: "carbon.api"
      # Maximium idle connections to carbonzipper
      idleConnections: 10
      pidFile: ""
      # See https://github.com/go-graphite/carbonzipper/blob/master/example.conf#L70-L108 for format explanation
      logger:
          - logger: ""
            file: "stderr"
            level: "debug"
            encoding: "console"
            encodingTime: "iso8601"
            encodingDuration: "seconds"
          - logger: ""
            file: "carbonapi.log"
            level: "info"
            encoding: "json"

  carbonzipper:
    conf: "{{ go_graphite.service }}.conf"
    providers:
      pkg:
        packages:
          - carbonzipper
    options:
      listen: ":8080"
      maxProcs: 0
      graphite:
          #  host: "localhost"
          interval: "60s"
          # prefix: "carbon.zipper"
      # Number of 100ms buckets to track request distribution in. Used to build
      # 'carbon.zipper.hostname.requests_in_0ms_to_100ms' metric and friends.
      # Requests beyond the last bucket are logged as slow
      # (default of 10 implies "slow" is >1 second).
      buckets: 10

      timeouts:
          # Maximum total backend requesting timeout in ms.
          # ( How long we may spend making requests. )
          global: "10s"
          # Timeout, in ms, once the final backend has been contacted.
          # ( [Effectively] How long we'll wait for the slowest response. )
          afterStarted: "2s"

      # Number of concurrent requests to any given backend - default is no limit.
      # If set, you likely want >= MaxIdleConnsPerHost
      concurrencyLimit: 0

      # Control http.MaxIdleConnsPerHost. Large values can lead to more idle
      # connections on the backend servers which may bump into limits; tune with care.
      maxIdleConnsPerHost: 100

      # If not zero, enabled cache for find requests
      # This parameter controls when it will expire (in seconds)
      # Default: 600 (10 minutes)
      expireDelaySec: 10

      # "http://host:port" array of instances of carbonserver stores
      # This is the *ONLY* config element that MUST be specified.
      backends:
          - "http://10.0.0.1:8080"
          - "http://10.0.0.2:8080"
          - "http://192.168.0.100:8080"
          - "http://192.168.0.200:8080"
          - "http://192.168.1.212:8080"

      carbonsearch:
          # Instance of carbonsearch backend
          backend: "http://127.0.0.1:8070"
          # carbonsearch prefix to reserve/register
          prefix: "virt.v1.*"

      # Enable compatibility with graphite-web 0.9
      # This will affect graphite-web 1.0+ with multiple cluster_servers
      # Default: disabled
      graphite09compat: false

      # Configuration for the logger
      # It's possible to specify multiple logger outputs with different loglevels and encodings
      # Logger is logrotate-compatible, you can freely move or rename or delete files, it will create
      # new one automatically
      logger:
         -
             # Available Loggers:
             #   "" - global for all
             #   "main" - what's before start
             #   "find" - for find handler
             #   "info" - for info handler
             #   "loadbalancer" - for lb handler
             #   "probe" - for background probes
             #   "render" - for render handler
             #   "slow" - slow query log ("Slow reuqest" messages)
             #   "access" - access logs (requests, times, etc)
             # Please note that if you want to have all logs going to stdout and access logs going to file, you need to define 2 sections for access logger (file + stdout) + one section for logger ""
             logger: ""

             #   "/some/file"
             #   "stderr"
             #   "stdout"
             #   "" (=="stderr")
             #   "none"
             # default: "stdout"
             file: "stderr"

             # "debug", "info", "warn", "error", "fatal", "panic" are available
             # default: info
             level: "debug"

             # "json", "mixed" or "console", default: console
             encoding: "console"

             # Time format (for timestamps in the logs), default: iso8601
             # Available: "millis", "nanos", "epoch", "iso8601"
             encodingTime: "iso8601"

             # Format to encode durations, default: seconds.
             # Available: "seconds", "nanos", "string"
             encodingDuration: "seconds"
         -
             logger: ""
             file: "carbonapi.log"
             level: "info"
             encoding: "json"